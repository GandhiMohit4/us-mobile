name: Build and Push Docker Image to ECR

on:
  push:
    branches:
      - main  # Trigger on pushes to main branch

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: Production
    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: hello-world-app-repo
      IMAGE_TAG: ${{ github.sha }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      EKS_CLUSTER_NAME: us-mobile-interview-cluster
      HELM_VALUES_FILE: gitops/helm-charts/hello-world-helm/values.yaml
      ARGOCD_APP_NAME: us-interview-hello-world-app

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Login to ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Step 4: Build and Push Docker Image
      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
      # Step 5: Update Kubeconfig
      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name ${{ env.EKS_CLUSTER_NAME }} --region ${{ env.AWS_REGION }}

      # Step 6: Install ArgoCD ClI
      - name: Install Argo CD CLI
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/
          
     # Step 7: Logging ArgoCD ClI
      - name: Login to Argo CD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          argocd login $ARGOCD_SERVER \
            --username $ARGOCD_USERNAME \
            --password $ARGOCD_PASSWORD \
            --insecure

      - name: Sync Argo CD application
        run: |
          argocd app set ${{ env.ARGOCD_APP_NAME }} \
            --parameter image=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

          argocd app sync ${{ env.ARGOCD_APP_NAME }}
          argocd app wait ${{ env.ARGOCD_APP_NAME }} --health --timeout 300